openapi: 3.0.1
info:
  title: Movie API
  description: This is the swagger file that goes with our server code
  version: 1.0.0
servers:
- url: /api
paths:
  /directors:
    get:
      tags:
      - Directors
      summary: Read the entire set of directors, sorted by id. Can be sort by enter
        limit param
      description: Read the entire set of directors, sorted by id. Can be sort by
        enter limit param
      operationId: directors.read_all
      parameters:
      - name: limit
        in: query
        description: Limit data for get request
        schema:
          type: integer
      responses:
        200:
          description: Successfully read directors set operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectorsResponse'
  /director:
    post:
      tags:
      - Directors
      summary: Create a new director
      description: Create a new director
      operationId: directors.create
      requestBody:
        description: new data director to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectorRequest'
        required: true
      responses:
        201:
          description: Successfully created director
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Director'
  /director/{id}:
    get:
      tags:
      - Directors
      summary: Read one director by id
      description: Read one director by id
      operationId: directors.read_one
      parameters:
      - name: id
        in: path
        description: Id of the director to get
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully read director from directors data operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorsResponse'
    put:
      tags:
      - Directors
      summary: Update a director
      description: Update a director
      operationId: directors.update
      parameters:
      - name: id
        in: path
        description: Id the director to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectorRequest'
        required: false
      responses:
        200:
          description: Successfully updated director
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Director'
    delete:
      tags:
      - Directors
      summary: Delete a director from the directors list
      description: Delete a director
      operationId: directors.delete
      parameters:
      - name: id
        in: path
        description: Id of the director to delete
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted a director
          content: {}
  /movies:
    get:
      tags:
      - Movies
      summary: Read the entire set of movies, sorted by id. Can be sort by enter limit
        param
      description: Read the entire set of movies, sorted by id. Can be sort by enter
        limit param
      operationId: movies.read_all
      parameters:
      - name: limit
        in: query
        description: Limit data for get request
        schema:
          type: integer
      responses:
        200:
          description: Successfully read movies set operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesResponse'
  /directors/{director_id}/movie:
    post:
      tags:
      - Movies
      summary: Create a movie associated with a director
      description: Create a movie associated with a director
      operationId: movies.create
      parameters:
      - name: director_id
        in: path
        description: Id of person associated with note
        required: true
        schema:
          type: integer
      requestBody:
        description: Text content of the note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
        required: true
      responses:
        201:
          description: Successfully created a note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
  /directors/{director_id}/movies/{movie_id}:
    get:
      tags:
      - Movies
      summary: Read a particular note associated with a person
      description: Read a particular note associated with a person
      operationId: movies.read_one
      parameters:
      - name: director_id
        in: path
        description: Id of director associated with movie
        required: true
        schema:
          type: integer
      - name: movie_id
        in: path
        description: Id of move
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully read movie for a director
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
    put:
      tags:
      - Movies
      summary: Update a movie associated with a director
      description: Update a movie associated with a director
      operationId: movies.update
      parameters:
      - name: director_id
        in: path
        description: Id the director to update
        required: true
        schema:
          type: integer
      - name: movie_id
        in: path
        description: Id of the movie associated with a director
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
        required: false
      responses:
        200:
          description: Successfully updated movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
    delete:
      tags:
      - Movies
      summary: Delete a movie associated with a director
      description: Delete a movie associated with a director
      operationId: movies.delete
      parameters:
      - name: director_id
        in: path
        description: Id of director associated with movie
        required: true
        schema:
          type: integer
      - name: movie_id
        in: path
        description: Id of movie
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully deleted a movie
          content: {}
  /directors/summary:
    get:
      tags:
      - Summary
      summary: Calculate budget, revenue, popularity of directors. Data length show by limit param
      description: Calculate budget, revenue, popularity of directors. Data length show by limit param
      operationId: directors.summary
      parameters:
      - name: limit
        in: query
        description: Limit data for get request
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successfully read summary of directors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectorsSummary'
  /movies/summary:
    get:
      tags:
      - Summary
      summary: Read limited movies data ordered by custom sort
      description: Read limited movies data ordered by custom sort
      operationId: movies.summary
      parameters:
      - name: limit
        in: query
        description: Limit data for get request
        required: true
        schema:
          type: integer
      - name: order_by
        in: query
        description: Data ordered by
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully read summary of movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesResponse'
                  
components:
  schemas:
    Director:
      type: object
      properties:
        id:
          type: number
          description: id of director
        name:
          type: string
          description: name of director
        gender:
          type: integer
          description: gender of director
        uid:
          type: integer
          description: uid of director
        department:
          type: string
          description: department of director
    DirectorRequest:
      x-body-name: director
      type: object
      properties:
        name:
          type: string
          description: name of director
        gender:
          type: integer
          description: gender of director
        uid:
          type: integer
          description: uid of director
        department:
          type: string
          description: department of director
    DirectorsResponse:
      type: object
      properties:
        id:
          type: number
          description: id of director
        name:
          type: string
          description: name of director
        gender:
          type: integer
          description: gender of director
        uid:
          type: integer
          description: uid of director
        department:
          type: string
          description: department of director
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    Movie:
      type: object
      properties:
        id:
          type: integer
          description: id of movie
        original_title:
          type: string
          description: origina_title of movie
        budget:
          type: integer
          description: budget of movie
        popularity:
          type: integer
          description: popularity of movie
        release_date:
          type: string
          description: release date of movie
        revenue:
          type: integer
          description: revenue of movie
        title:
          type: string
          description: title of movie
        vote_average:
          type: number
          description: vote average of movie
        vote_count:
          type: integer
          description: vote count of movie
        overview:
          type: string
          description: overview of movie
        tagline:
          type: string
          description: tagline of movie
        uid:
          type: integer
          description: uid of movie
        director_id:
          type: integer
          description: director id of movie
    MovieRequest:
      x-body-name: movie
      type: object
      properties:
        original_title:
          type: string
          description: origina_title of movie
        budget:
          type: integer
          description: budget of movie
        popularity:
          type: integer
          description: popularity of movie
        release_date:
          type: string
          description: release date of movie
        revenue:
          type: integer
          description: revenue of movie
        title:
          type: string
          description: title of movie
        vote_average:
          type: number
          description: vote average of movie
        vote_count:
          type: integer
          description: vote count of movie
        overview:
          type: string
          description: overview of movie
        tagline:
          type: string
          description: tagline of movie
        uid:
          type: integer
          description: uid of movie
    MoviesResponse:
      type: object
      properties:
        id:
          type: integer
          description: id of movie
        original_title:
          type: string
          description: origina_title of movie
        budget:
          type: integer
          description: budget of movie
        popularity:
          type: integer
          description: popularity of movie
        release_date:
          type: string
          description: release date of movie
        revenue:
          type: integer
          description: revenue of movie
        title:
          type: string
          description: title of movie
        vote_average:
          type: number
          description: vote average of movie
        vote_count:
          type: integer
          description: vote count of movie
        overview:
          type: string
          description: overview of movie
        tagline:
          type: string
          description: tagline of movie
        uid:
          type: integer
          description: uid of movie
        director:
          type: array
          items:
            $ref: '#/components/schemas/Director'
    DirectorsSummary:
      type: object
      properties:
        id:
          type: integer
          description: id of director
        name:
          type: string
          description: name of director
        gender:
          type: integer
          description: gender of director
        total_budget: 
          type: integer
          description: total budget from all movies directed of director
        total_popularity:
          type: integer
          description: total popularity from all movies directed gained by director
        total_revenue:
          type: integer
          description: total revenue of director earn by director
